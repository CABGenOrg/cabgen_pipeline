from os import path
from subprocess import run, CalledProcessError


def run_command_line(command_line: str) -> str:
    """
    Executes a generic program in the terminal.

    Args:
        command_line (str): Command to be executed.

    Returns:
        str: Command line output.
    """
    if not command_line:
        raise ValueError("The command_line argument cannot be empty.")

    try:
        result = run(
            command_line,
            shell=True,
            check=True,
            text=True,
            capture_output=True
        )

        if result.returncode != 0:
            raise RuntimeError(
                f"Command '{command_line}' failed with error: {result.stderr}")

        return result.stdout

    except CalledProcessError as error:
        raise RuntimeError(
            f"Command '{error.cmd}' failed with return code "
            f"{error.returncode}. Output: {error.output}. "
            f"Error: {error.stderr}."
        )

    except Exception as error:
        raise RuntimeError(f"An error occurred: {error}")


def run_blastx(contig_file: str, blast_db_path: str, sample: str,
               outfile_suffix: str) -> str:
    """
    Executes the BLASTx program with the specified parameters and returns the
    path to the resulting output file.

    Args:
        contig_file (str): Path to the file containing contig sequences to be
        analyzed.
        blast_db_path (str): Path to the BLAST database against which the
        contigs will be queried.
        sample (str): Name of the sample being processed, used for
        identification purposes.
        outfile_suffix (str): Suffix to append to the output file name for
        distinction.

    Returns:
        str: Path to the output file generated by BLASTx.
    """
    outfile = f"{sample}_{path.basename(outfile_suffix)}"
    dirname = path.dirname(path.abspath(outfile_suffix))

    outfile_path = path.join(dirname, outfile)
    command_line = (f"blastx -db {blast_db_path} -query {contig_file}"
                    f" -evalue 0.001 -out {outfile_path}")
    try:
        run(command_line, shell=True)
    except Exception as error:
        raise Exception(f"An error occurred: {error}")

    return outfile
